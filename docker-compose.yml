version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-tss_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tss-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tss-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tss-network
    volumes:
      - ./services/auth-service:/app
      - ./shared:/shared
      - /app/node_modules

  rider-service:
    build:
      context: .
      dockerfile: services/rider-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tss-network
    volumes:
      - ./services/rider-service:/app
      - ./shared:/shared
      - /app/node_modules

  jacket-service:
    build:
      context: .
      dockerfile: services/jacket-service/Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tss-network
    volumes:
      - ./services/jacket-service:/app
      - ./shared:/shared
      - /app/node_modules

  payment-service:
    build:
      context: .
      dockerfile: services/payment-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tss-network
    volumes:
      - ./services/payment-service:/app
      - ./shared:/shared
      - /app/node_modules

  sms-service:
    build:
      context: .
      dockerfile: services/sms-service/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tss-network
    volumes:
      - ./services/sms-service:/app
      - ./shared:/shared
      - /app/node_modules

  verification-service:
    build:
      context: .
      dockerfile: services/verification-service/Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tss-network
    volumes:
      - ./services/verification-service:/app
      - ./shared:/shared
      - /app/node_modules

networks:
  tss-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: