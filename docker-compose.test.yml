version: '3.8'

services:
  # Test Database
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tss_test_db
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tss-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Test Redis
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - test_redis_data:/data
    networks:
      - tss-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Test Runner - Unit and Integration Tests
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    environment:
      - NODE_ENV=test
      - JWT_SECRET=test-jwt-secret-key
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_NAME=tss_test_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis-test:6379
    networks:
      - tss-test-network
    volumes:
      - ./:/app
      - test_node_modules:/app/node_modules
      - /app/services/*/node_modules
    command: ["./wait-for-services.sh", "npm", "test"]

  # E2E Test Runner - Requires running services
  e2e-test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      - auth-service-test
      - rider-service-test
      - jacket-service-test
      - payment-service-test
      - sms-service-test
      - verification-service-test
    environment:
      - NODE_ENV=test
      - E2E_BASE_URL=http://host.docker.internal
      - AUTH_SERVICE_PORT=3001
      - RIDER_SERVICE_PORT=3002
      - JACKET_SERVICE_PORT=3003
      - PAYMENT_SERVICE_PORT=3004
      - SMS_SERVICE_PORT=3005
      - VERIFICATION_SERVICE_PORT=3006
      - E2E_ADMIN_USERNAME=admin
      - E2E_ADMIN_PASSWORD=admin123
      - E2E_OFFICER_USERNAME=officer
      - E2E_OFFICER_PASSWORD=officer123
    networks:
      - tss-test-network
    volumes:
      - ./:/app
      - test_node_modules:/app/node_modules
    command: ["./wait-for-services.sh", "npm", "run", "test:e2e"]
    profiles:
      - e2e

  # Test Services for E2E Testing
  auth-service-test:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=test
      - PORT=3001
      - JWT_SECRET=test-jwt-secret-key
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_NAME=tss_test_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis-test:6379
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - tss-test-network
    profiles:
      - e2e

  rider-service-test:
    build:
      context: .
      dockerfile: services/rider-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=test
      - PORT=3002
      - JWT_SECRET=test-jwt-secret-key
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_NAME=tss_test_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis-test:6379
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - tss-test-network
    profiles:
      - e2e

  jacket-service-test:
    build:
      context: .
      dockerfile: services/jacket-service/Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=test
      - PORT=3003
      - JWT_SECRET=test-jwt-secret-key
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_NAME=tss_test_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis-test:6379
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - tss-test-network
    profiles:
      - e2e

  payment-service-test:
    build:
      context: .
      dockerfile: services/payment-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=test
      - PORT=3004
      - JWT_SECRET=test-jwt-secret-key
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_NAME=tss_test_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis-test:6379
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - tss-test-network
    profiles:
      - e2e

  sms-service-test:
    build:
      context: .
      dockerfile: services/sms-service/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=test
      - PORT=3005
      - JWT_SECRET=test-jwt-secret-key
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_NAME=tss_test_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis-test:6379
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - tss-test-network
    profiles:
      - e2e

  verification-service-test:
    build:
      context: .
      dockerfile: services/verification-service/Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=test
      - PORT=3006
      - JWT_SECRET=test-jwt-secret-key
      - DB_HOST=postgres-test
      - DB_PORT=5432
      - DB_NAME=tss_test_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis-test:6379
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - tss-test-network
    profiles:
      - e2e

networks:
  tss-test-network:
    driver: bridge

volumes:
  test_postgres_data:
  test_redis_data:
  test_node_modules: