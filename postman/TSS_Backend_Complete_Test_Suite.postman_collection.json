{
  "info": {
    "name": "TSS Backend - Complete Test Suite",
    "description": "Comprehensive automated test suite for Transportation Security System Backend API covering all endpoints and features",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost",
      "type": "string"
    },
    {
      "key": "auth_port",
      "value": "3001",
      "type": "string"
    },
    {
      "key": "rider_port",
      "value": "3002",
      "type": "string"
    },
    {
      "key": "jacket_port",
      "value": "3003",
      "type": "string"
    },
    {
      "key": "payment_port",
      "value": "3004",
      "type": "string"
    },
    {
      "key": "sms_port",
      "value": "3005",
      "type": "string"
    },
    {
      "key": "verification_port",
      "value": "3006",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_rider_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_jacket_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_payment_ref",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_incident_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_batch_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_jacket_number",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Setup & Health Checks",
      "item": [
        {
          "name": "Auth Service Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Auth Service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'healthy');",
                  "    pm.expect(response).to.have.property('service', 'auth-service');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/health",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "health"
              ]
            }
          }
        },
        {
          "name": "Rider Service Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Rider Service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'healthy');",
                  "    pm.expect(response).to.have.property('service', 'rider-service');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{rider_port}}/health",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{rider_port}}",
              "path": [
                "health"
              ]
            }
          }
        },
        {
          "name": "Jacket Service Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Jacket Service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'healthy');",
                  "    pm.expect(response).to.have.property('service', 'jacket-service');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{jacket_port}}/health",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{jacket_port}}",
              "path": [
                "health"
              ]
            }
          }
        },
        {
          "name": "Payment Service Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Payment Service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'healthy');",
                  "    pm.expect(response).to.have.property('service', 'payment-service');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{payment_port}}/health",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{payment_port}}",
              "path": [
                "health"
              ]
            }
          }
        },
        {
          "name": "SMS Service Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('SMS Service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'healthy');",
                  "    pm.expect(response).to.have.property('service', 'sms-service');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{sms_port}}/health",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{sms_port}}",
              "path": [
                "health"
              ]
            }
          }
        },
        {
          "name": "Verification Service Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Verification Service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'healthy');",
                  "    pm.expect(response).to.have.property('service', 'verification-service');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{verification_port}}/health",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{verification_port}}",
              "path": [
                "health"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Authentication Service Tests",
      "item": [
        {
          "name": "Login - Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful with valid credentials', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('access_token');",
                  "    pm.expect(response.data).to.have.property('refresh_token');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    ",
                  "    // Store tokens for subsequent requests",
                  "    pm.collectionVariables.set('access_token', response.data.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.data.refresh_token);",
                  "    pm.collectionVariables.set('test_user_id', response.data.user.id);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.user).to.have.property('id');",
                  "    pm.expect(response.data.user).to.have.property('username');",
                  "    pm.expect(response.data.user).to.have.property('role');",
                  "    pm.expect(response.data.user).to.not.have.property('password');",
                  "});",
                  "",
                  "pm.test('JWT token format is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const tokenParts = response.data.access_token.split('.');",
                  "    pm.expect(tokenParts).to.have.lengthOf(3);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "auth",
                "login"
              ]
            }
          }
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login fails with invalid credentials', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', false);",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.have.property('message');",
                  "    pm.expect(response.error.message).to.include('Invalid');",
                  "});",
                  "",
                  "pm.test('No sensitive data in error response', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.not.have.property('password');",
                  "    pm.expect(response).to.not.have.property('token');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"invalid_user\",\n  \"password\": \"wrong_password\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "auth",
                "login"
              ]
            }
          }
        },
        {
          "name": "Login - Input Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Input validation works correctly', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', false);",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.have.property('message');",
                  "    pm.expect(response.error.message).to.include('validation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"\",\n  \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "auth",
                "login"
              ]
            }
          }
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User profile retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('username');",
                  "    pm.expect(response.data).to.have.property('role');",
                  "    pm.expect(response.data).to.not.have.property('password');",
                  "});",
                  "",
                  "pm.test('User data matches login response', function () {",
                  "    const response = pm.response.json();",
                  "    const storedUserId = pm.collectionVariables.get('test_user_id');",
                  "    pm.expect(response.data.id).to.equal(parseInt(storedUserId));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/auth/me",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "auth",
                "me"
              ]
            }
          }
        },
        {
          "name": "Get Profile - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', false);",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/auth/me",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "auth",
                "me"
              ]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('access_token');",
                  "    pm.expect(response.data).to.have.property('refresh_token');",
                  "    ",
                  "    // Update tokens",
                  "    pm.collectionVariables.set('access_token', response.data.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.data.refresh_token);",
                  "});",
                  "",
                  "pm.test('New token is different from old token', function () {",
                  "    const response = pm.response.json();",
                  "    const oldToken = pm.collectionVariables.get('access_token');",
                  "    pm.expect(response.data.access_token).to.not.equal(oldToken);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "auth",
                "refresh"
              ]
            }
          }
        },
        {
          "name": "Refresh - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid refresh token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', false);",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"invalid_token\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "auth",
                "refresh"
              ]
            }
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('logout');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}:{{auth_port}}/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "port": "{{auth_port}}",
              "path": [
                "auth",
                "logout"
              ]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running request to: ' + pm.request.url);",
          "",
          "// Set timestamp for test data",
          "pm.globals.set('timestamp', new Date().getTime());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response has proper structure', function () {",
          "    pm.response.to.be.json;",
          "    const response = pm.response.json();",
          "    if (pm.response.code === 200) {",
          "        pm.expect(response).to.have.property('success');",
          "        pm.expect(response).to.have.property('timestamp');",
          "    }",
          "});",
          "",
          "pm.test('Security headers present', function () {",
          "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.exist;",
          "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.exist;",
          "    pm.expect(pm.response.headers.get('X-XSS-Protection')).to.exist;",
          "});"
        ]
      }
    }
  ]
}